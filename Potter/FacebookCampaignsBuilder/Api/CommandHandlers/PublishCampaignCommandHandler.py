import typing
from copy import deepcopy

from facebook_business.adobjects.ad import Ad
from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.adobjects.adset import AdSet
from facebook_business.adobjects.campaign import Campaign

from Core.Web.FacebookGraphAPI.GraphAPI.GraphAPISdkBase import GraphAPISdkBase
from Potter.FacebookCampaignsBuilder.Infrastructure.GraphAPIHandlers.GraphAPIAdBuilderHandler import \
    GraphAPIAdBuilderHandler
from Potter.FacebookCampaignsBuilder.Infrastructure.GraphAPIHandlers.GraphAPIAdSetBuilderHandler import \
    GraphAPIAdSetBuilderHandler
from Potter.FacebookCampaignsBuilder.Infrastructure.GraphAPIHandlers.GraphAPICampaignBuilderHandler import \
    GraphAPICampaignBuilderHandler


class PublishCampaignCommandHandler(object):

    @classmethod
    def handle(cls, request: typing.Dict = None, facebook_config: typing.Any = None, permanent_token: str = None):
        _ = GraphAPISdkBase(business_owner_permanent_token=permanent_token, facebook_config=facebook_config)

        campaignStructure = request['campaign_optimization_details']['campaign_structure']
        campaignTemplate = request['campaign_template']

        adSetTemplate = request['ad_set_template']
        adSetBudgetTemplate = request['campaign_optimization_details']['budget_template']

        adTemplate = request['advert_template']

        # Check if automated structure is required
        if campaignStructure['use_recommended_campaign_structure']:
            campaignStructure['split_by_device'] = True
            campaignStructure['split_by_location'] = True
            campaignStructure['split_by_gender'] = True
            campaignStructure['split_by_age_range'] = False

        #  Build campaigns
        campaignBuilder = GraphAPICampaignBuilderHandler()

        # If 'geo_locations' or 'countries' are not set at ad set level, set them to [None]
        adSetTemplate = cls._SetDefaultLocationTargeting(adSetTemplate)

        # Build all campaigns generated by the split
        campaignBuilder.BuildCampaigns(campaignStructure, campaignTemplate,
                                       adSetTemplate['targeting']['device_platforms'],
                                       adSetTemplate['targeting']['geo_locations']['countries'])

        #  Build adsets
        adSetBuilder = GraphAPIAdSetBuilderHandler()
        if 'campaign_budget_optimization' in campaignTemplate.keys() and \
                campaignTemplate['campaign_budget_optimization']:
            isUsingCampaignBudgetOptimization = True
        else:
            isUsingCampaignBudgetOptimization = False
        adSetBuilder.buildAdSetsFull(campaignStructure, adSetTemplate, adSetBudgetTemplate,
                                     isUsingCampaignBudgetOptimization)

        # Build adverts
        adBuilder = GraphAPIAdBuilderHandler()

        #  Publish on Facebook
        campaignTree = []
        campaignResponse = {
            'facebook_id': None,
            'ad_sets': []
        }

        adAccount = AdAccount(fbid=request['ad_account_id'])
        for campaignIndex, campaign in enumerate(campaignBuilder.campaigns):
            try:
                # Publish campaign
                facebookCampaign = adAccount.create_campaign(params=campaign)
                campaignFacebookId = facebookCampaign.get_id()

                # Add new campaign to response
                campaignTree.append(deepcopy(campaignResponse))
                campaignTree[campaignIndex]['facebook_id'] = campaignFacebookId

                for adSetIndex, adSet in enumerate(adSetBuilder.adSets):
                    adSet['campaign_id'] = campaignFacebookId
                    # remove array of [None] from countries
                    if 'geo_locations' in adSet['targeting'].keys() and \
                            'countries' in adSet['targeting']['geo_locations'] and \
                            adSet['targeting']['geo_locations']['countries'] == [None]:
                        del adSet['targeting']['geo_locations']['countries']
                    adSet['debug'] = "all"
                    facebookAdSet = adAccount.create_ad_set(params=adSet)
                    adSetFacebookId = facebookAdSet.get_id()

                    #  Add new adset to response
                    adSetResponse = {
                        'facebook_id': adSetFacebookId,
                        'ads': []
                    }
                    campaignTree[campaignIndex]['ad_sets'].append(deepcopy(adSetResponse))

                    # Publish ad
                    for adIndex, adTemplateDetails in enumerate(adTemplate['details']['generated_adverts']):
                        currentAdTemplate = {}
                        currentAdTemplate.update(adTemplateDetails)
                        currentAdTemplate['ad_format'] = adTemplate['ad_format']
                        adBuilder.buildAd(request['ad_account_id'], adSetFacebookId, currentAdTemplate,
                                          adTemplate['details']['page_facebook_id'],
                                          adTemplate['details']['instagram_account_facebook_id'])
                        adBuilder.ad[Ad.Field.name] = adSet['name'] + " - Ad - " + str(adIndex + 1)
                        ad = adAccount.create_ad(params=adBuilder.ad)
                        adFacebookId = ad.get_id()

                        # Add new ad to response
                        campaignTree[campaignIndex]['ad_sets'][adSetIndex]['ads'].append(adFacebookId)
            except Exception as e:
                cls._DeleteIncompleteCampaigns(campaignTree)
                raise e

        return campaignTree

    @staticmethod
    def _SetDefaultLocationTargeting(adSetTemplate):
        if 'geo_locations' not in adSetTemplate['targeting'].keys():
            adSetTemplate['targeting']['geo_locations'] = {
                "countries": [None]
            }

        if 'countries' not in adSetTemplate['targeting']['geo_locations'].keys():
            adSetTemplate['targeting']['geo_locations']["countries"] = [None]

        return adSetTemplate

    @classmethod
    def _DeleteIncompleteCampaigns(cls, campaignTree):
        for campaign in campaignTree:
            cls.DeleteCampaign(campaign['facebook_id'])
            for adSet in campaign['ad_sets']:
                cls.DeleteAdSet(adSet['facebook_id'])
                for adFacebookId in adSet['ads']:
                    cls.DeleteAd(adFacebookId)

    @staticmethod
    def DeleteCampaign(facebookId):
        try:
            campaign = Campaign(fbid=facebookId)
            campaign.api_delete()
        except Exception as e:
            raise e

    @staticmethod
    def DeleteAdSet(facebookId):
        try:
            adSet = AdSet(fbid=facebookId)
            adSet.api_delete()
        except Exception as e:
            raise e

    @staticmethod
    def DeleteAd(facebookId):
        try:
            ad = Ad(fbid=facebookId)
            ad.api_delete()
        except Exception as e:
            raise e
